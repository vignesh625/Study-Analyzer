import java.util.Set;
import java.util.HashSet;

public class MyProgram
{
    public static void main(String[] args)
    {
        int[][] grid = new int[][]{
            {7, 6, 1, 5, 4, 9, 2, 8, 3},
            {2, 4, 8, 3, 7, 1, 6, 5, 9},
            {9, 5, 3, 6, 8, 2, 1, 4, 7},
            {5, 1, 4, 7, 6, 3, 8, 9, 2},
            {6, 2, 7, 9, 5, 8, 4, 3, 1},
            {3, 8, 9, 2, 1, 4, 5, 7, 6},
            {8, 9, 5, 1, 2, 7, 3, 6, 4},
            {1, 3, 6, 4, 9, 5, 7, 2, 8},
            {4, 7, 2, 8, 3, 6, 9, 1, 5}};
                  
        Cell[][] puzzle = new Cell[9][9];
        for (int r = 0; r < 9; r++) {
            for (int c = 0; c < 9; c++) {
                puzzle[r][c] = new Cell(grid[r][c], r, c);
            }
        }
        
        System.out.println(stringBoard(puzzle));
        System.out.println(checkSolution(puzzle));
    }
    
    
    public static boolean checkSolution(Cell[][] board) {
        for(int row = 0; row < board.length; row++){
            int val = board[row][0].getValue();
            for(int col = 1; col < board[row].length; col++){
                int value  = board[row][col].getValue();
                if(val == value){
                    return false;
                }
            }
        }
        for(int co = 0; co < board[0].length; co++){
            int r = board[0][co].getValue();
            for(int ro = 1; ro < board.length; ro++){
                int n = board[ro][co].getValue();
                if(r == n){
                    return false;
                }
            }
        }
        for(int rows = 0; rows < board.length; rows += 3){
            for(int cols = 0; cols < board[0].length; cols += 3){
                Set<Integer> set = new HashSet<>();
                for(int x = 0; x < 3; x++){
                    for(int j = 0; j < 3; j++){
                        if (!set.add(board[rows + x][cols + j].getValue())){
                            return false;
                        }
                    }
                }
            }
        }
        
        return true;
    }
    
    
    public static String stringBoard(Cell[][] board) {
        String string = "";
        for(int row = 0; row < board.length; row++){
            for(int col = 0; col < board[0].length; col++){
                string += " " + (board[row][col].getValue()) + (" ");
                
                if((col + 1) % 3 == 0 && col != 8){
                    string += (" | ");
                }
            }
            string += ("\n");
            if((row + 1) % 3 == 0 && row != 8){
                string += " ------------------------------- \n";
            }
        }
     
        return string;
    }
    
    
}public class Cell {

    private final int row;
    private final int col;
    private int value;

    public Cell(int val, int r, int c) {
        row = r;
        col = c;
        value = val;
    }
    
    public int getRow() {
        return row;
    }

    public int getCol() {
        return col;
    }
    
    public int getValue() {
        return value;
    }
    
    public void setValue(int val) {
        value = val;
    }

    public int getCellNum() {
        return (row * 9) + col;
    }

    @Override
    public String toString() {
        if (value == 0) {
            return " ";
        }
        return "" + value;
    }
}
